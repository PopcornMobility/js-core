{"ast":null,"code":"import * as React from 'react';\nimport rcWarning, { resetWarned } from \"rc-util/es/warning\";\nexport { resetWarned };\nexport function noop() {} // eslint-disable-next-line import/no-mutable-exports\n\nvar warning = noop;\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function warning(valid, component, message) {\n    rcWarning(valid, \"[antd: \".concat(component, \"] \").concat(message)); // StrictMode will inject console which will not throw warning in React 17.\n\n    if (process.env.NODE_ENV === 'test') {\n      resetWarned();\n    }\n  };\n}\n\nexport var WarningContext = /*#__PURE__*/React.createContext({});\n/**\n * This is a hook but we not named as `useWarning`\n * since this is only used in development.\n * We should always wrap this in `if (process.env.NODE_ENV !== 'production')` condition\n */\n\nexport var devUseWarning = process.env.NODE_ENV !== 'production' ? function (component) {\n  var _React$useContext = React.useContext(WarningContext),\n      deprecated = _React$useContext.deprecated;\n\n  var typeWarning = function typeWarning(valid, type, message) {\n    if (deprecated !== false || type !== 'deprecated') {\n      process.env.NODE_ENV !== \"production\" ? warning(valid, component, message) : void 0;\n    }\n  };\n\n  typeWarning.deprecated = function (valid, oldProp, newProp, message) {\n    typeWarning(valid, 'deprecated', \"`\".concat(oldProp, \"` is deprecated. Please use `\").concat(newProp, \"` instead.\").concat(message ? \" \".concat(message) : ''));\n  };\n\n  return typeWarning;\n} : function () {\n  var noopWarning = function noopWarning() {};\n\n  noopWarning.deprecated = noop;\n  return noopWarning;\n};\nexport default warning;","map":null,"metadata":{},"sourceType":"module"}