{"ast":null,"code":"import _regeneratorRuntime from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, put, call, race, delay } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport _ from 'lodash';\nimport { api } from '../../utils/net';\nimport actions from '../user/actions';\n\nfunction showErrorNotification(content) {\n  var title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Oops';\n  var description = 'Something went wrong, please retry.';\n\n  if (_.isObject(content)) {\n    var errors = content.errors,\n        message = content.message;\n    var keys = errors && Object.keys(errors);\n\n    if (keys && keys.length > 0) {\n      var _errors$keys$ = _slicedToArray(errors[keys[0]], 1),\n          firstError = _errors$keys$[0];\n\n      description = firstError; // show first error in the errors array\n    } else if (message) {\n      description = message;\n    }\n  } else if (content) {\n    description = content;\n  }\n\n  notification.error({\n    message: title,\n    description: description\n  });\n}\n\nfunction request(loginUrl) {\n  return /*#__PURE__*/_regeneratorRuntime.mark(function REQUEST(_ref) {\n    var payload, options, action, extra, _yield$race, response, timeout, data;\n\n    return _regeneratorRuntime.wrap(function REQUEST$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            payload = _ref.payload;\n            options = payload.options, action = payload.action, extra = payload.extra;\n            _context.prev = 2;\n            _context.next = 5;\n            return put({\n              type: \"\".concat(action, \"/request\"),\n              payload: {\n                extra: extra\n              }\n            });\n\n          case 5:\n            _context.next = 7;\n            return race({\n              response: call(api, options),\n              timeout: delay(60 * 1000)\n            });\n\n          case 7:\n            _yield$race = _context.sent;\n            response = _yield$race.response;\n            timeout = _yield$race.timeout;\n\n            if (!timeout) {\n              _context.next = 15;\n              break;\n            }\n\n            notification.warning({\n              message: 'Slow connection',\n              description: 'Request timed out. Please retry.'\n            });\n            _context.next = 14;\n            return put({\n              type: \"\".concat(action, \"/error\")\n            });\n\n          case 14:\n            return _context.abrupt(\"return\");\n\n          case 15:\n            _context.next = 17;\n            return call([response, response.json]);\n\n          case 17:\n            data = _context.sent;\n\n            if (!response.ok) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 21;\n            return put({\n              type: \"\".concat(action, \"/success\"),\n              payload: data\n            });\n\n          case 21:\n            return _context.abrupt(\"return\");\n\n          case 22:\n            _context.next = 24;\n            return put({\n              type: \"\".concat(action, \"/error\"),\n              payload: data\n            });\n\n          case 24:\n            _context.t0 = response.status;\n            _context.next = _context.t0 === 401 ? 27 : _context.t0 === 429 ? 34 : 36;\n            break;\n\n          case 27:\n            if (!(options.url === loginUrl)) {\n              _context.next = 30;\n              break;\n            }\n\n            showErrorNotification(data);\n            return _context.abrupt(\"break\", 38);\n\n          case 30:\n            console.log('401'); // user not authorized, redirect to login\n\n            _context.next = 33;\n            return put({\n              type: actions.LOGOUT\n            });\n\n          case 33:\n            return _context.abrupt(\"break\", 38);\n\n          case 34:\n            showErrorNotification('Too many attempts.');\n            return _context.abrupt(\"break\", 38);\n\n          case 36:\n            showErrorNotification(data);\n            return _context.abrupt(\"break\", 38);\n\n          case 38:\n            _context.next = 45;\n            break;\n\n          case 40:\n            _context.prev = 40;\n            _context.t1 = _context[\"catch\"](2);\n\n            if (_context.t1.message === 'Failed to fetch') {\n              showErrorNotification('Check your internet connection.', 'Offline');\n            } else {\n              showErrorNotification();\n            } // console.log(e)\n\n\n            _context.next = 45;\n            return put({\n              type: \"\".concat(action, \"/error\")\n            });\n\n          case 45:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, REQUEST, null, [[2, 40]]);\n  });\n}\n\nexport default function rootSaga(config) {\n  var url;\n  return _regeneratorRuntime.wrap(function rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          url = config.url;\n          _context2.next = 3;\n          return all([takeEvery('network/request', request(url))]);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["/Users/stefanm/Projects/js-core/src/redux/network/sagas.js"],"names":["rootSaga","all","takeEvery","put","call","race","delay","notification","_","api","actions","showErrorNotification","content","title","description","isObject","errors","message","keys","Object","length","firstError","error","request","loginUrl","REQUEST","payload","options","action","extra","type","response","timeout","warning","json","data","ok","status","url","console","log","LOGOUT","config"],"mappings":"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","sourcesContent":["import { all, takeEvery, put, call, race, delay } from 'redux-saga/effects'\nimport { notification } from 'antd'\nimport _ from 'lodash'\nimport { api } from '../../utils/net'\nimport actions from '../user/actions'\n\nfunction showErrorNotification(content, title = 'Oops') {\n  let description = 'Something went wrong, please retry.'\n\n  if (_.isObject(content)) {\n    const { errors, message } = content\n    const keys = errors && Object.keys(errors)\n\n    if (keys && keys.length > 0) {\n      const {\n        [keys[0]]: [firstError],\n      } = errors\n      description = firstError // show first error in the errors array\n    } else if (message) {\n      description = message\n    }\n  } else if (content) {\n    description = content\n  }\n\n  notification.error({\n    message: title,\n    description,\n  })\n}\n\nfunction request(loginUrl) {\n  return function* REQUEST({ payload }) {\n    const { options, action, extra } = payload\n\n    try {\n      yield put({\n        type: `${action}/request`,\n        payload: {\n          extra,\n        },\n      })\n\n      const { response, timeout } = yield race({\n        response: call(api, options),\n        timeout: delay(60 * 1000),\n      })\n\n      // handle timeouts\n\n      if (timeout) {\n        notification.warning({\n          message: 'Slow connection',\n          description: 'Request timed out. Please retry.',\n        })\n\n        yield put({\n          type: `${action}/error`,\n        })\n\n        return\n      }\n\n      // get json data\n\n      const data = yield call([response, response.json])\n\n      // console.log(data)\n\n      if (response.ok) {\n        yield put({\n          type: `${action}/success`,\n          payload: data,\n        })\n\n        return\n      }\n\n      // oops, something happened\n\n      yield put({\n        type: `${action}/error`,\n        payload: data,\n      })\n\n      // check status code\n\n      switch (response.status) {\n        case 401:\n          // is this a login attempt?\n          if (options.url === loginUrl) {\n            showErrorNotification(data)\n            break\n          }\n          console.log('401')\n          // user not authorized, redirect to login\n          yield put({\n            type: actions.LOGOUT,\n          })\n          break\n\n        case 429:\n          showErrorNotification('Too many attempts.')\n          break\n\n        default:\n          showErrorNotification(data)\n          break\n      }\n    } catch (e) {\n      if (e.message === 'Failed to fetch') {\n        showErrorNotification('Check your internet connection.', 'Offline')\n      } else {\n        showErrorNotification()\n      }\n\n      // console.log(e)\n\n      yield put({\n        type: `${action}/error`,\n      })\n    }\n  }\n}\n\nexport default function* rootSaga(config) {\n  const { url } = config\n\n  yield all([takeEvery('network/request', request(url))])\n}\n"]},"metadata":{},"sourceType":"module"}