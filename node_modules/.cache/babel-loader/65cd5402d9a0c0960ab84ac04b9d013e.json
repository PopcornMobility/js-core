{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport CheckCircleFilled from \"@ant-design/icons/es/icons/CheckCircleFilled\";\nimport CloseCircleFilled from \"@ant-design/icons/es/icons/CloseCircleFilled\";\nimport ExclamationCircleFilled from \"@ant-design/icons/es/icons/ExclamationCircleFilled\";\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport classNames from 'classnames';\nimport { FormContext, FormItemInputContext } from '../context';\nimport { getStatus } from '../util';\nvar iconMap = {\n  success: CheckCircleFilled,\n  warning: ExclamationCircleFilled,\n  error: CloseCircleFilled,\n  validating: LoadingOutlined\n};\nexport default function StatusProvider(_ref) {\n  var children = _ref.children,\n      errors = _ref.errors,\n      warnings = _ref.warnings,\n      hasFeedback = _ref.hasFeedback,\n      validateStatus = _ref.validateStatus,\n      prefixCls = _ref.prefixCls,\n      meta = _ref.meta,\n      noStyle = _ref.noStyle;\n  var itemPrefixCls = \"\".concat(prefixCls, \"-item\");\n\n  var _React$useContext = React.useContext(FormContext),\n      feedbackIcons = _React$useContext.feedbackIcons;\n\n  var mergedValidateStatus = getStatus(errors, warnings, meta, null, !!hasFeedback, validateStatus);\n\n  var _React$useContext2 = React.useContext(FormItemInputContext),\n      parentIsFormItemInput = _React$useContext2.isFormItemInput,\n      parentStatus = _React$useContext2.status,\n      parentHasFeedback = _React$useContext2.hasFeedback,\n      parentFeedbackIcon = _React$useContext2.feedbackIcon; // ====================== Context =======================\n\n\n  var formItemStatusContext = React.useMemo(function () {\n    var _a;\n\n    var feedbackIcon;\n\n    if (hasFeedback) {\n      var customIcons = hasFeedback !== true && hasFeedback.icons || feedbackIcons;\n      var customIconNode = mergedValidateStatus && ((_a = customIcons === null || customIcons === void 0 ? void 0 : customIcons({\n        status: mergedValidateStatus,\n        errors: errors,\n        warnings: warnings\n      })) === null || _a === void 0 ? void 0 : _a[mergedValidateStatus]);\n      var IconNode = mergedValidateStatus && iconMap[mergedValidateStatus];\n      feedbackIcon = customIconNode !== false && IconNode ? /*#__PURE__*/React.createElement(\"span\", {\n        className: classNames(\"\".concat(itemPrefixCls, \"-feedback-icon\"), \"\".concat(itemPrefixCls, \"-feedback-icon-\").concat(mergedValidateStatus))\n      }, customIconNode || /*#__PURE__*/React.createElement(IconNode, null)) : null;\n    }\n\n    var context = {\n      status: mergedValidateStatus || '',\n      errors: errors,\n      warnings: warnings,\n      hasFeedback: !!hasFeedback,\n      feedbackIcon: feedbackIcon,\n      isFormItemInput: true\n    }; // No style will follow parent context\n\n    if (noStyle) {\n      context.status = (mergedValidateStatus !== null && mergedValidateStatus !== void 0 ? mergedValidateStatus : parentStatus) || '';\n      context.isFormItemInput = parentIsFormItemInput;\n      context.hasFeedback = !!(hasFeedback !== null && hasFeedback !== void 0 ? hasFeedback : parentHasFeedback);\n      context.feedbackIcon = hasFeedback !== undefined ? context.feedbackIcon : parentFeedbackIcon;\n    }\n\n    return context;\n  }, [mergedValidateStatus, hasFeedback, noStyle, parentIsFormItemInput, parentStatus]); // ======================= Render =======================\n\n  return /*#__PURE__*/React.createElement(FormItemInputContext.Provider, {\n    value: formItemStatusContext\n  }, children);\n}","map":null,"metadata":{},"sourceType":"module"}