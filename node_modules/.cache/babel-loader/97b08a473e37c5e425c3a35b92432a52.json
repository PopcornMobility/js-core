{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nexport function getLocaleHierarchy(locale) {\n  var results = [locale];\n  var localeParts = locale.split('-');\n\n  for (var i = localeParts.length; i > 1; i--) {\n    results.push(localeParts.slice(0, i - 1).join('-'));\n  }\n\n  return results;\n}\n\nvar MissingLocaleDataError =\n/** @class */\nfunction (_super) {\n  __extends(MissingLocaleDataError, _super);\n\n  function MissingLocaleDataError() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'MISSING_LOCALE_DATA';\n    return _this;\n  }\n\n  return MissingLocaleDataError;\n}(Error);\n\nexport function isMissingLocaleDataError(e) {\n  return e.type === 'MISSING_LOCALE_DATA';\n}\nexport function unpackData(locale, localeData,\n/** By default shallow merge the dictionaries. */\nreducer) {\n  if (reducer === void 0) {\n    reducer = function reducer(all, d) {\n      return __assign(__assign({}, all), d);\n    };\n  }\n\n  var localeHierarchy = getLocaleHierarchy(locale);\n  var dataToMerge = localeHierarchy.map(function (l) {\n    return localeData.data[l];\n  }).filter(Boolean);\n\n  if (!dataToMerge.length) {\n    throw new MissingLocaleDataError(\"Missing locale data for \\\"\" + locale + \"\\\", lookup hierarchy: \" + localeHierarchy.join(', '));\n  }\n\n  dataToMerge.reverse();\n  return dataToMerge.reduce(reducer, {});\n}","map":null,"metadata":{},"sourceType":"module"}