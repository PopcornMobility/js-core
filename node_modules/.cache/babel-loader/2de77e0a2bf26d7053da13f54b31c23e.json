{"ast":null,"code":"import { CanonicalizeLocaleList } from '../CanonicalizeLocaleList';\nimport { ToObject } from '../../262';\nimport { GetOption } from '../GetOption';\nimport { ResolveLocale } from '../ResolveLocale';\nimport { SetNumberFormatUnitOptions } from './SetNumberFormatUnitOptions';\nimport { CurrencyDigits } from './CurrencyDigits';\nimport { SetNumberFormatDigitOptions } from './SetNumberFormatDigitOptions';\nimport { invariant } from '../utils';\n/**\n * Chop off the unicode extension from the locale string.\n */\n\nfunction removeUnicodeExtensionFromLocale(canonicalLocale) {\n  var extensionIndex = canonicalLocale.indexOf('-u-');\n  return extensionIndex >= 0 ? canonicalLocale.slice(0, extensionIndex) : canonicalLocale;\n}\n/**\n * https://tc39.es/ecma402/#sec-initializenumberformat\n */\n\n\nexport function InitializeNumberFormat(nf, locales, opts, _a) {\n  var getInternalSlots = _a.getInternalSlots,\n      localeData = _a.localeData,\n      availableLocales = _a.availableLocales,\n      numberingSystemNames = _a.numberingSystemNames,\n      getDefaultLocale = _a.getDefaultLocale,\n      currencyDigitsData = _a.currencyDigitsData; // @ts-ignore\n\n  var requestedLocales = CanonicalizeLocaleList(locales);\n  var options = opts === undefined ? Object.create(null) : ToObject(opts);\n  var opt = Object.create(null);\n  var matcher = GetOption(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');\n  opt.localeMatcher = matcher;\n  var numberingSystem = GetOption(options, 'numberingSystem', 'string', undefined, undefined);\n\n  if (numberingSystem !== undefined && numberingSystemNames.indexOf(numberingSystem) < 0) {\n    // 8.a. If numberingSystem does not match the Unicode Locale Identifier type nonterminal,\n    // throw a RangeError exception.\n    throw RangeError(\"Invalid numberingSystems: \" + numberingSystem);\n  }\n\n  opt.nu = numberingSystem;\n  var r = ResolveLocale(availableLocales, requestedLocales, opt, // [[RelevantExtensionKeys]] slot, which is a constant\n  ['nu'], localeData, getDefaultLocale);\n  var dataLocaleData = localeData[removeUnicodeExtensionFromLocale(r.locale)];\n  invariant(!!dataLocaleData, \"Missing locale data for \" + r.locale);\n  var internalSlots = getInternalSlots(nf);\n  internalSlots.locale = r.locale;\n  internalSlots.dataLocale = r.dataLocale;\n  internalSlots.numberingSystem = r.nu;\n  internalSlots.dataLocaleData = dataLocaleData;\n  SetNumberFormatUnitOptions(nf, options, {\n    getInternalSlots: getInternalSlots\n  });\n  var style = internalSlots.style;\n  var mnfdDefault;\n  var mxfdDefault;\n\n  if (style === 'currency') {\n    var currency = internalSlots.currency;\n    var cDigits = CurrencyDigits(currency, {\n      currencyDigitsData: currencyDigitsData\n    });\n    mnfdDefault = cDigits;\n    mxfdDefault = cDigits;\n  } else {\n    mnfdDefault = 0;\n    mxfdDefault = style === 'percent' ? 0 : 3;\n  }\n\n  var notation = GetOption(options, 'notation', 'string', ['standard', 'scientific', 'engineering', 'compact'], 'standard');\n  internalSlots.notation = notation;\n  SetNumberFormatDigitOptions(internalSlots, options, mnfdDefault, mxfdDefault, notation);\n  var compactDisplay = GetOption(options, 'compactDisplay', 'string', ['short', 'long'], 'short');\n\n  if (notation === 'compact') {\n    internalSlots.compactDisplay = compactDisplay;\n  }\n\n  var useGrouping = GetOption(options, 'useGrouping', 'boolean', undefined, true);\n  internalSlots.useGrouping = useGrouping;\n  var signDisplay = GetOption(options, 'signDisplay', 'string', ['auto', 'never', 'always', 'exceptZero'], 'auto');\n  internalSlots.signDisplay = signDisplay;\n  return nf;\n}","map":null,"metadata":{},"sourceType":"module"}