{"ast":null,"code":"import _objectSpread from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport store from 'store';\n\nfunction toQueryString(params) {\n  var nesting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return Object.entries(params).filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        k = _ref2[0],\n        v = _ref2[1];\n\n    return k && v !== null;\n  }).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        k = _ref4[0],\n        v = _ref4[1];\n\n    k = encodeURIComponent(k); // check if there are nested objects\n\n    if (typeof v === 'object') {\n      return toQueryString(v, nesting ? \"\".concat(nesting, \"[\").concat(k, \"]\") : \"\".concat(k));\n    }\n\n    v = encodeURIComponent(v);\n    return nesting ? \"\".concat(nesting, \"[\").concat(k, \"]=\").concat(v) : \"\".concat(k, \"=\").concat(v);\n  }).join('&');\n}\n\nexport function api(options) {\n  var params = options.params,\n      _options$method = options.method,\n      method = _options$method === void 0 ? 'GET' : _options$method,\n      _options$token = options.token,\n      token = _options$token === void 0 ? '' : _options$token;\n  var url = options.url,\n      headers = options.headers;\n  var lang = store.get('app.settings.locale') || 'en';\n  headers = _objectSpread({\n    Accept: 'application/json',\n    Authorization: \"Bearer \".concat(token),\n    'Accept-Language': lang\n  }, headers);\n  var newOptions = {\n    headers: headers,\n    method: method\n  };\n\n  if (method === 'POST' || method === 'PUT') {\n    newOptions = _objectSpread({}, newOptions, {\n      body: JSON.stringify(params)\n    });\n  } else if (method === 'GET' && params) {\n    // if params are sent as an object, try to serialize and then append to the provided url\n    var qs = toQueryString(params);\n\n    if (qs) {\n      url += url.indexOf('?') === -1 ? '?' : '&';\n      url += qs;\n    }\n  } // console.log('fetch url', url);\n\n\n  return fetch(url, newOptions);\n}\nexport function postJson(url, params, token, headers) {\n  return {\n    url: url,\n    method: 'POST',\n    params: params,\n    token: token,\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    })\n  };\n}\nexport function putJson(url, params, token, headers) {\n  return {\n    url: url,\n    method: 'PUT',\n    params: params,\n    token: token,\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    })\n  };\n}\nexport function get(url, params, token, headers) {\n  return {\n    url: url,\n    method: 'GET',\n    params: params,\n    token: token,\n    headers: headers\n  };\n}\nexport function destroy(url, params, token, headers) {\n  return {\n    url: url,\n    method: 'DELETE',\n    params: params,\n    token: token,\n    headers: headers\n  };\n}\nexport default {\n  api: api,\n  postJson: postJson,\n  putJson: putJson,\n  get: get,\n  destroy: destroy\n};","map":{"version":3,"sources":["/Users/stefanm/Projects/js-core/src/utils/net.js"],"names":["store","toQueryString","params","nesting","Object","entries","filter","k","v","map","encodeURIComponent","join","api","options","method","token","url","headers","lang","get","Accept","Authorization","newOptions","body","JSON","stringify","qs","indexOf","fetch","postJson","putJson","destroy"],"mappings":"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","sourcesContent":["import store from 'store'\n\nfunction toQueryString(params, nesting = '') {\n  return Object.entries(params)\n    .filter(([k, v]) => k && v !== null)\n    .map(([k, v]) => {\n      k = encodeURIComponent(k)\n\n      // check if there are nested objects\n      if (typeof v === 'object') {\n        return toQueryString(v, nesting ? `${nesting}[${k}]` : `${k}`)\n      }\n\n      v = encodeURIComponent(v)\n\n      return nesting ? `${nesting}[${k}]=${v}` : `${k}=${v}`\n    })\n    .join('&')\n}\n\nexport function api(options) {\n  const { params, method = 'GET', token = '' } = options\n  let { url, headers } = options\n\n  const lang = store.get('app.settings.locale') || 'en'\n\n  headers = {\n    Accept: 'application/json',\n    Authorization: `Bearer ${token}`,\n    'Accept-Language': lang,\n    ...headers,\n  }\n\n  let newOptions = {\n    headers,\n    method,\n  }\n\n  if (method === 'POST' || method === 'PUT') {\n    newOptions = {\n      ...newOptions,\n      body: JSON.stringify(params),\n    }\n  } else if (method === 'GET' && params) {\n    // if params are sent as an object, try to serialize and then append to the provided url\n    const qs = toQueryString(params)\n\n    if (qs) {\n      url += url.indexOf('?') === -1 ? '?' : '&'\n      url += qs\n    }\n  }\n\n  // console.log('fetch url', url);\n\n  return fetch(url, newOptions)\n}\n\nexport function postJson(url, params, token, headers) {\n  return {\n    url,\n    method: 'POST',\n    params,\n    token,\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json',\n    },\n  }\n}\n\nexport function putJson(url, params, token, headers) {\n  return {\n    url,\n    method: 'PUT',\n    params,\n    token,\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json',\n    },\n  }\n}\n\nexport function get(url, params, token, headers) {\n  return {\n    url,\n    method: 'GET',\n    params,\n    token,\n    headers,\n  }\n}\n\nexport function destroy(url, params, token, headers) {\n  return {\n    url,\n    method: 'DELETE',\n    params,\n    token,\n    headers,\n  }\n}\n\nexport default {\n  api,\n  postJson,\n  putJson,\n  get,\n  destroy,\n}\n"]},"metadata":{},"sourceType":"module"}