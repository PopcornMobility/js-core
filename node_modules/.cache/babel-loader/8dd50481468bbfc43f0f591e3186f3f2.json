{"ast":null,"code":"\"use client\";\n\nimport _defineProperty from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { NotificationProvider, useNotification as useRcNotification } from 'rc-notification';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport { getCloseIcon, PureContent } from './PurePanel';\nimport useStyle from './style';\nimport { getMotion, getPlacementStyle } from './util';\nvar DEFAULT_OFFSET = 24;\nvar DEFAULT_DURATION = 4.5;\nvar DEFAULT_PLACEMENT = 'topRight';\n\nvar Wrapper = function Wrapper(_ref) {\n  var children = _ref.children,\n      prefixCls = _ref.prefixCls;\n\n  var _useStyle = useStyle(prefixCls),\n      _useStyle2 = _slicedToArray(_useStyle, 2),\n      hashId = _useStyle2[1];\n\n  return /*#__PURE__*/React.createElement(NotificationProvider, {\n    classNames: {\n      list: hashId,\n      notice: hashId\n    }\n  }, children);\n};\n\nvar renderNotifications = function renderNotifications(node, _ref2) {\n  var prefixCls = _ref2.prefixCls,\n      key = _ref2.key;\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    prefixCls: prefixCls,\n    key: key\n  }, node);\n};\n\nvar Holder = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var top = props.top,\n      bottom = props.bottom,\n      staticPrefixCls = props.prefixCls,\n      staticGetContainer = props.getContainer,\n      maxCount = props.maxCount,\n      rtl = props.rtl,\n      onAllRemoved = props.onAllRemoved;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      getPopupContainer = _React$useContext.getPopupContainer,\n      notification = _React$useContext.notification;\n\n  var prefixCls = staticPrefixCls || getPrefixCls('notification'); // =============================== Style ===============================\n\n  var getStyle = function getStyle(placement) {\n    return getPlacementStyle(placement, top !== null && top !== void 0 ? top : DEFAULT_OFFSET, bottom !== null && bottom !== void 0 ? bottom : DEFAULT_OFFSET);\n  };\n\n  var getClassName = function getClassName() {\n    return classNames(_defineProperty({}, \"\".concat(prefixCls, \"-rtl\"), rtl));\n  }; // ============================== Motion ===============================\n\n\n  var getNotificationMotion = function getNotificationMotion() {\n    return getMotion(prefixCls);\n  }; // ============================== Origin ===============================\n\n\n  var _useRcNotification = useRcNotification({\n    prefixCls: prefixCls,\n    style: getStyle,\n    className: getClassName,\n    motion: getNotificationMotion,\n    closable: true,\n    closeIcon: getCloseIcon(prefixCls),\n    duration: DEFAULT_DURATION,\n    getContainer: function getContainer() {\n      return (staticGetContainer === null || staticGetContainer === void 0 ? void 0 : staticGetContainer()) || (getPopupContainer === null || getPopupContainer === void 0 ? void 0 : getPopupContainer()) || document.body;\n    },\n    maxCount: maxCount,\n    onAllRemoved: onAllRemoved,\n    renderNotifications: renderNotifications\n  }),\n      _useRcNotification2 = _slicedToArray(_useRcNotification, 2),\n      api = _useRcNotification2[0],\n      holder = _useRcNotification2[1]; // ================================ Ref ================================\n\n\n  React.useImperativeHandle(ref, function () {\n    return Object.assign(Object.assign({}, api), {\n      prefixCls: prefixCls,\n      notification: notification\n    });\n  });\n  return holder;\n}); // ==============================================================================\n// ==                                   Hook                                   ==\n// ==============================================================================\n\nexport function useInternalNotification(notificationConfig) {\n  var holderRef = React.useRef(null);\n  var warning = devUseWarning('Notification'); // ================================ API ================================\n\n  var wrapAPI = React.useMemo(function () {\n    // Wrap with notification content\n    // >>> Open\n    var open = function open(config) {\n      var _a;\n\n      if (!holderRef.current) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'usage', 'You are calling notice in render which will break in React 18 concurrent mode. Please trigger in effect instead.') : void 0;\n        return;\n      }\n\n      var _holderRef$current = holderRef.current,\n          originOpen = _holderRef$current.open,\n          prefixCls = _holderRef$current.prefixCls,\n          notification = _holderRef$current.notification;\n      var noticePrefixCls = \"\".concat(prefixCls, \"-notice\");\n\n      var message = config.message,\n          description = config.description,\n          icon = config.icon,\n          type = config.type,\n          btn = config.btn,\n          className = config.className,\n          style = config.style,\n          _config$role = config.role,\n          role = _config$role === void 0 ? 'alert' : _config$role,\n          closeIcon = config.closeIcon,\n          restConfig = __rest(config, [\"message\", \"description\", \"icon\", \"type\", \"btn\", \"className\", \"style\", \"role\", \"closeIcon\"]);\n\n      var realCloseIcon = getCloseIcon(noticePrefixCls, closeIcon);\n      return originOpen(Object.assign(Object.assign({\n        // use placement from props instead of hard-coding \"topRight\"\n        placement: (_a = notificationConfig === null || notificationConfig === void 0 ? void 0 : notificationConfig.placement) !== null && _a !== void 0 ? _a : DEFAULT_PLACEMENT\n      }, restConfig), {\n        content: /*#__PURE__*/React.createElement(PureContent, {\n          prefixCls: noticePrefixCls,\n          icon: icon,\n          type: type,\n          message: message,\n          description: description,\n          btn: btn,\n          role: role\n        }),\n        className: classNames(type && \"\".concat(noticePrefixCls, \"-\").concat(type), className, notification === null || notification === void 0 ? void 0 : notification.className),\n        style: Object.assign(Object.assign({}, notification === null || notification === void 0 ? void 0 : notification.style), style),\n        closeIcon: realCloseIcon,\n        closable: !!realCloseIcon\n      }));\n    }; // >>> destroy\n\n\n    var destroy = function destroy(key) {\n      var _a, _b;\n\n      if (key !== undefined) {\n        (_a = holderRef.current) === null || _a === void 0 ? void 0 : _a.close(key);\n      } else {\n        (_b = holderRef.current) === null || _b === void 0 ? void 0 : _b.destroy();\n      }\n    };\n\n    var clone = {\n      open: open,\n      destroy: destroy\n    };\n    var keys = ['success', 'info', 'warning', 'error'];\n    keys.forEach(function (type) {\n      clone[type] = function (config) {\n        return open(Object.assign(Object.assign({}, config), {\n          type: type\n        }));\n      };\n    });\n    return clone;\n  }, []); // ============================== Return ===============================\n\n  return [wrapAPI, /*#__PURE__*/React.createElement(Holder, Object.assign({\n    key: \"notification-holder\"\n  }, notificationConfig, {\n    ref: holderRef\n  }))];\n}\nexport default function useNotification(notificationConfig) {\n  return useInternalNotification(notificationConfig);\n}","map":null,"metadata":{},"sourceType":"module"}