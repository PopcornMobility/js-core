{"ast":null,"code":"import _objectWithoutProperties from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/stefanm/Projects/js-core/src/components/generic/Form/remoteSelect.js\";\nimport React from 'react';\nimport { Select, Spin } from 'antd';\nimport debounce from 'lodash/debounce';\nimport isObject from 'lodash/isObject';\nimport isEqual from 'lodash/isEqual';\nvar Option = Select.Option;\n/* Props explaining:\n\nremoteSearch: {\n  filterOption: false, \n      // From Antd\n  mode: \"multiple\", \n      // From Antd\n  {...rest}  \n      // Can contain ANTD Select props from documentation\n  paramSearchQuery: 'search', \n      **REQUIRED** The actual query for URL \n  apiFn(params), \n      **REQUIRED** Should return an array of desired values. Can use fetch, axios etc ...\n}\n\napiFn example : \n.then(response => response.json())\n.then(body => {\n  // OBJECT with text - value\n  result = body.data.map(user => ({\n    text: `${user.first_name} ${user.last_name}`,\n    value: user.id,\n  }));\n\n  // ARRAY as desired form\n  result = body.data.map(user => user.first_name);\n});\n\n*/\n\nvar latestFetch = 0;\n\nvar RemoteSelect = /*#__PURE__*/function (_React$Component) {\n  _inherits(RemoteSelect, _React$Component);\n\n  function RemoteSelect(props) {\n    var _this;\n\n    _classCallCheck(this, RemoteSelect);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RemoteSelect).call(this, props));\n\n    _this.componentDidUpdate = function (prevProps) {\n      var options = _this.props.itemConfig.options;\n      var prevOptions = prevProps.itemConfig.options;\n\n      if (!isEqual(prevOptions, options)) {\n        _this.setState({\n          preOptions: options\n        });\n      }\n    };\n\n    _this.fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {\n        var _this$props$itemConfi, apiFn, paramSearchQuery, params, fetchID, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (value) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _this.setState({\n                  data: [],\n                  fetching: true\n                });\n\n                _this$props$itemConfi = _this.props.itemConfig.remoteSearch, apiFn = _this$props$itemConfi.apiFn, paramSearchQuery = _this$props$itemConfi.paramSearchQuery;\n                params = {};\n                params[paramSearchQuery] = value; // Update state 'data' with latest triggered fetch\n\n                latestFetch += 1;\n                fetchID = latestFetch;\n                _context.next = 10;\n                return apiFn(params);\n\n              case 10:\n                data = _context.sent;\n\n                if (fetchID === latestFetch) {\n                  _this.setState({\n                    data: data,\n                    fetching: false,\n                    preOptions: []\n                  });\n                }\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleChange = function (value, option) {\n      var onChange = _this.props.onChange;\n      onChange(value, option);\n    };\n\n    var _options = _this.props.itemConfig.options;\n    _this.fetchData = debounce(_this.fetchData, 800);\n    _this.state = {\n      data: [],\n      // eslint-disable-next-line react/no-unused-state\n      value: [],\n      fetching: false,\n      preOptions: _options || []\n    };\n    return _this;\n  }\n\n  _createClass(RemoteSelect, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          fetching = _this$state.fetching,\n          data = _this$state.data,\n          preOptions = _this$state.preOptions;\n\n      var _this$props = this.props,\n          _this$props$itemConfi2 = _this$props.itemConfig,\n          _this$props$itemConfi3 = _this$props$itemConfi2.remoteSearch,\n          apiFn = _this$props$itemConfi3.apiFn,\n          paramSearchQuery = _this$props$itemConfi3.paramSearchQuery,\n          restRS = _objectWithoutProperties(_this$props$itemConfi3, [\"apiFn\", \"paramSearchQuery\"]),\n          disabled = _this$props$itemConfi2.disabled,\n          restProps = _objectWithoutProperties(_this$props, [\"itemConfig\"]);\n\n      var dataFiltered = data.filter(function (x) {\n        return !preOptions.some(function (y) {\n          return y.value === x.value;\n        });\n      });\n      var newData = dataFiltered.concat(preOptions);\n      return /*#__PURE__*/React.createElement(Select, Object.assign({}, restRS, restProps, {\n        disabled: disabled,\n        showSearch: true,\n        allowClear: true,\n        onSearch: this.fetchData,\n        onFocus: function onFocus() {\n          return _this2.fetchData(' ');\n        },\n        onChange: this.handleChange,\n        notFoundContent: fetching ? /*#__PURE__*/React.createElement(Spin, {\n          size: \"small\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 37\n          }\n        }) : null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 7\n        }\n      }), newData.map(function (d) {\n        var isString = !isObject(d);\n        return /*#__PURE__*/React.createElement(Option, {\n          key: isString ? d : JSON.stringify(d),\n          value: isString ? d : d.value,\n          title: isString ? d : d.text,\n          extra: d,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }\n        }, isString ? d : d.text);\n      }));\n    }\n  }]);\n\n  return RemoteSelect;\n}(React.Component);\n\nexport default RemoteSelect;","map":{"version":3,"sources":["/Users/stefanm/Projects/js-core/src/components/generic/Form/remoteSelect.js"],"names":["React","Select","Spin","debounce","isObject","isEqual","Option","latestFetch","RemoteSelect","props","componentDidUpdate","prevProps","options","itemConfig","prevOptions","setState","preOptions","fetchData","value","data","fetching","remoteSearch","apiFn","paramSearchQuery","params","fetchID","handleChange","option","onChange","state","restRS","disabled","restProps","dataFiltered","filter","x","some","y","newData","concat","map","d","isString","JSON","stringify","text","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Select, Spin } from 'antd'\nimport debounce from 'lodash/debounce'\nimport isObject from 'lodash/isObject'\nimport isEqual from 'lodash/isEqual'\n\nconst { Option } = Select\n\n/* Props explaining:\n\nremoteSearch: {\n  filterOption: false, \n      // From Antd\n  mode: \"multiple\", \n      // From Antd\n  {...rest}  \n      // Can contain ANTD Select props from documentation\n  paramSearchQuery: 'search', \n      **REQUIRED** The actual query for URL \n  apiFn(params), \n      **REQUIRED** Should return an array of desired values. Can use fetch, axios etc ...\n}\n\napiFn example : \n.then(response => response.json())\n.then(body => {\n  // OBJECT with text - value\n  result = body.data.map(user => ({\n    text: `${user.first_name} ${user.last_name}`,\n    value: user.id,\n  }));\n\n  // ARRAY as desired form\n  result = body.data.map(user => user.first_name);\n});\n\n*/\n\nlet latestFetch = 0\n\nclass RemoteSelect extends React.Component {\n  constructor(props) {\n    super(props)\n    const {\n      itemConfig: { options },\n    } = this.props\n\n    this.fetchData = debounce(this.fetchData, 800)\n\n    this.state = {\n      data: [],\n      // eslint-disable-next-line react/no-unused-state\n      value: [],\n      fetching: false,\n      preOptions: options || [],\n    }\n  }\n\n  componentDidUpdate = prevProps => {\n    const {\n      itemConfig: { options },\n    } = this.props\n\n    const {\n      itemConfig: { options: prevOptions },\n    } = prevProps\n\n    if (!isEqual(prevOptions, options)) {\n      this.setState({\n        preOptions: options,\n      })\n    }\n  }\n\n  fetchData = async value => {\n    // No need to call API search without value\n    if (!value) {\n      return\n    }\n\n    this.setState({ data: [], fetching: true })\n\n    const {\n      itemConfig: {\n        remoteSearch: { apiFn, paramSearchQuery },\n      },\n    } = this.props\n\n    const params = {}\n    params[paramSearchQuery] = value\n\n    // Update state 'data' with latest triggered fetch\n    latestFetch += 1\n    const fetchID = latestFetch\n\n    const data = await apiFn(params)\n\n    if (fetchID === latestFetch) {\n      this.setState({\n        data,\n        fetching: false,\n        preOptions: [],\n      })\n    }\n  }\n\n  handleChange = (value, option) => {\n    const { onChange } = this.props\n\n    onChange(value, option)\n  }\n\n  render() {\n    const { fetching, data, preOptions } = this.state\n\n    const {\n      itemConfig: {\n        remoteSearch: { apiFn, paramSearchQuery, ...restRS },\n        disabled,\n      },\n      // pass value from Form's getFieldDecorator() to <Select>\n      ...restProps\n    } = this.props\n\n    const dataFiltered = data.filter(x => !preOptions.some(y => y.value === x.value))\n\n    const newData = dataFiltered.concat(preOptions)\n\n    return (\n      <Select\n        {...restRS}\n        // DO NOT modify below default props\n        {...restProps}\n        disabled={disabled}\n        showSearch\n        allowClear\n        onSearch={this.fetchData}\n        onFocus={() => this.fetchData(' ')}\n        onChange={this.handleChange}\n        notFoundContent={fetching ? <Spin size=\"small\" /> : null}\n      >\n        {newData.map(d => {\n          const isString = !isObject(d)\n\n          return (\n            <Option\n              key={isString ? d : JSON.stringify(d)}\n              value={isString ? d : d.value}\n              title={isString ? d : d.text}\n              extra={d}\n            >\n              {isString ? d : d.text}\n            </Option>\n          )\n        })}\n      </Select>\n    )\n  }\n}\n\nexport default RemoteSelect\n"]},"metadata":{},"sourceType":"module"}