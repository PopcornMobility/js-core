{"ast":null,"code":"import _classCallCheck from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/stefanm/Projects/js-core/src/components/generic/QRScanner/index.js\";\nimport React from 'react';\nimport { Button, Popover } from 'antd';\nimport QrReader from 'react-qr-reader';\n\nvar QRScanner = /*#__PURE__*/function (_React$Component) {\n  _inherits(QRScanner, _React$Component);\n\n  function QRScanner() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, QRScanner);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QRScanner)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      scanEnabled: false\n    };\n\n    _this.handleScan = function (data) {\n      var _this$props = _this.props,\n          onScan = _this$props.onScan,\n          keepOpen = _this$props.keepOpen;\n\n      if (data) {\n        if (keepOpen !== true) {\n          _this.setState({\n            scanEnabled: false\n          });\n        } // check if data contains a citylink specific url\n\n\n        var regex = /(.*)citylink.ro\\/ref\\/(.*)/;\n        var match = data.match(regex);\n        var ref = match && match[2];\n\n        if (onScan) {\n          onScan(ref || data);\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(QRScanner, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var scanEnabled = this.state.scanEnabled;\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          buttonText = _this$props2.buttonText,\n          buttonSize = _this$props2.buttonSize,\n          buttonBlock = _this$props2.buttonBlock,\n          buttonType = _this$props2.buttonType,\n          style = _this$props2.style,\n          extra = _this$props2.extra;\n      var scanView = scanEnabled && /*#__PURE__*/React.createElement(QrReader, {\n        delay: 500,\n        onScan: this.handleScan,\n        onError: function onError() {},\n        style: {\n          width: 250,\n          height: 250\n        },\n        showViewFinder: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 7\n        }\n      });\n      var scanButton = /*#__PURE__*/React.createElement(Popover, {\n        visible: scanEnabled,\n        onVisibleChange: function onVisibleChange(visible) {\n          return _this2.setState({\n            scanEnabled: visible\n          });\n        },\n        placement: \"bottomRight\",\n        content: /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }\n        }, extra, scanView),\n        trigger: \"click\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        icon: \"qrcode\",\n        className: className,\n        size: buttonSize,\n        block: buttonBlock,\n        type: buttonType,\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }, buttonText || 'Scan'));\n      return scanButton;\n    }\n  }]);\n\n  return QRScanner;\n}(React.Component);\n\nexport { QRScanner as default };","map":{"version":3,"sources":["/Users/stefanm/Projects/js-core/src/components/generic/QRScanner/index.js"],"names":["React","Button","Popover","QrReader","QRScanner","state","scanEnabled","handleScan","data","props","onScan","keepOpen","setState","regex","match","ref","className","buttonText","buttonSize","buttonBlock","buttonType","style","extra","scanView","width","height","scanButton","visible","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,MAAhC;AACA,OAAOC,QAAP,MAAqB,iBAArB;;IAEqBC,S;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,WAAW,EAAE;AADP,K;;UAIRC,U,GAAa,UAAAC,IAAI,EAAI;AAAA,wBACU,MAAKC,KADf;AAAA,UACXC,MADW,eACXA,MADW;AAAA,UACHC,QADG,eACHA,QADG;;AAGnB,UAAIH,IAAJ,EAAU;AACR,YAAIG,QAAQ,KAAK,IAAjB,EAAuB;AACrB,gBAAKC,QAAL,CAAc;AAAEN,YAAAA,WAAW,EAAE;AAAf,WAAd;AACD,SAHO,CAKR;;;AACA,YAAMO,KAAK,GAAG,4BAAd;AACA,YAAMC,KAAK,GAAGN,IAAI,CAACM,KAAL,CAAWD,KAAX,CAAd;AACA,YAAME,GAAG,GAAGD,KAAK,IAAIA,KAAK,CAAC,CAAD,CAA1B;;AAEA,YAAIJ,MAAJ,EAAY;AACVA,UAAAA,MAAM,CAACK,GAAG,IAAIP,IAAR,CAAN;AACD;AACF;AACF,K;;;;;;;6BAEQ;AAAA;;AAAA,UACCF,WADD,GACiB,KAAKD,KADtB,CACCC,WADD;AAAA,yBAE8E,KAAKG,KAFnF;AAAA,UAECO,SAFD,gBAECA,SAFD;AAAA,UAEYC,UAFZ,gBAEYA,UAFZ;AAAA,UAEwBC,UAFxB,gBAEwBA,UAFxB;AAAA,UAEoCC,WAFpC,gBAEoCA,WAFpC;AAAA,UAEiDC,UAFjD,gBAEiDA,UAFjD;AAAA,UAE6DC,KAF7D,gBAE6DA,KAF7D;AAAA,UAEoEC,KAFpE,gBAEoEA,KAFpE;AAIP,UAAMC,QAAQ,GAAGjB,WAAW,iBAC1B,oBAAC,QAAD;AACE,QAAA,KAAK,EAAE,GADT;AAEE,QAAA,MAAM,EAAE,KAAKC,UAFf;AAGE,QAAA,OAAO,EAAE,mBAAM,CAAE,CAHnB;AAIE,QAAA,KAAK,EAAE;AAAEiB,UAAAA,KAAK,EAAE,GAAT;AAAcC,UAAAA,MAAM,EAAE;AAAtB,SAJT;AAKE,QAAA,cAAc,MALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAUA,UAAMC,UAAU,gBACd,oBAAC,OAAD;AACE,QAAA,OAAO,EAAEpB,WADX;AAEE,QAAA,eAAe,EAAE,yBAAAqB,OAAO;AAAA,iBAAI,MAAI,CAACf,QAAL,CAAc;AAAEN,YAAAA,WAAW,EAAEqB;AAAf,WAAd,CAAJ;AAAA,SAF1B;AAGE,QAAA,SAAS,EAAC,aAHZ;AAIE,QAAA,OAAO,eACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGL,KADH,EAEGC,QAFH,CALJ;AAUE,QAAA,OAAO,EAAC,OAVV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAYE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,SAAS,EAAEP,SAFb;AAGE,QAAA,IAAI,EAAEE,UAHR;AAIE,QAAA,KAAK,EAAEC,WAJT;AAKE,QAAA,IAAI,EAAEC,UALR;AAME,QAAA,KAAK,EAAEC,KANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQGJ,UAAU,IAAI,MARjB,CAZF,CADF;AA0BA,aAAOS,UAAP;AACD;;;;EAjEoC1B,KAAK,CAAC4B,S;;SAAxBxB,S","sourcesContent":["import React from 'react'\nimport { Button, Popover } from 'antd'\nimport QrReader from 'react-qr-reader'\n\nexport default class QRScanner extends React.Component {\n  state = {\n    scanEnabled: false,\n  }\n\n  handleScan = data => {\n    const { onScan, keepOpen } = this.props\n\n    if (data) {\n      if (keepOpen !== true) {\n        this.setState({ scanEnabled: false })\n      }\n\n      // check if data contains a citylink specific url\n      const regex = /(.*)citylink.ro\\/ref\\/(.*)/\n      const match = data.match(regex)\n      const ref = match && match[2]\n\n      if (onScan) {\n        onScan(ref || data)\n      }\n    }\n  }\n\n  render() {\n    const { scanEnabled } = this.state\n    const { className, buttonText, buttonSize, buttonBlock, buttonType, style, extra } = this.props\n\n    const scanView = scanEnabled && (\n      <QrReader\n        delay={500}\n        onScan={this.handleScan}\n        onError={() => {}}\n        style={{ width: 250, height: 250 }}\n        showViewFinder\n      />\n    )\n\n    const scanButton = (\n      <Popover\n        visible={scanEnabled}\n        onVisibleChange={visible => this.setState({ scanEnabled: visible })}\n        placement=\"bottomRight\"\n        content={\n          <div>\n            {extra}\n            {scanView}\n          </div>\n        }\n        trigger=\"click\"\n      >\n        <Button\n          icon=\"qrcode\"\n          className={className}\n          size={buttonSize}\n          block={buttonBlock}\n          type={buttonType}\n          style={style}\n        >\n          {buttonText || 'Scan'}\n        </Button>\n      </Popover>\n    )\n\n    return scanButton\n  }\n}\n"]},"metadata":{},"sourceType":"module"}