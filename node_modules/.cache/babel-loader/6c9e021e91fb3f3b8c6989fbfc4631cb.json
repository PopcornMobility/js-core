{"ast":null,"code":"import _regeneratorRuntime from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(REQUEST),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(network_rootSaga);\n\nimport { all, takeEvery, put, call, race, delay } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { api } from \"../../utils/net\";\nimport { actions } from \"./actions\";\nimport isObject from 'lodash/isObject';\n\nfunction showErrorNotification(content) {\n  var title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Oops';\n  var description = 'Something went wrong, please retry.';\n\n  if (isObject(content)) {\n    var errors = content.errors,\n        message = content.message;\n    var keys = errors && Object.keys(errors);\n\n    if (keys && keys.length > 0) {\n      var _errors$keys$ = _slicedToArray(errors[keys[0]], 1),\n          firstError = _errors$keys$[0];\n\n      description = firstError; // show first error in the errors array\n    } else if (message) {\n      description = message;\n    }\n  } else if (content) {\n    description = content;\n  }\n\n  notification.error({\n    message: title,\n    description: description\n  });\n}\n\nfunction REQUEST(_ref) {\n  var payload, timeout, options, action, networkSagaConfig, api_delay, controller, signal, _yield$race, response, r_timeout, r_cancel, data;\n\n  return _regeneratorRuntime.wrap(function REQUEST$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          timeout = 60;\n          options = payload.options, action = payload.action, networkSagaConfig = payload.networkSagaConfig; // Set API timeout\n\n          api_delay = timeout;\n\n          if (networkSagaConfig.timeout) {\n            api_delay = networkSagaConfig.timeout;\n          }\n\n          _context.prev = 5;\n          _context.next = 8;\n          return put({\n            type: \"\".concat(action, \"/request\"),\n            requestPayload: payload\n          });\n\n        case 8:\n          // Start race\n          controller = new AbortController();\n          signal = controller.signal;\n          _context.next = 12;\n          return race({\n            response: call(api, _objectSpread({}, options, {\n              signal: signal\n            })),\n            r_timeout: delay(api_delay * 1000),\n            r_cancel: take(\"\".concat(action, \"/cancel\"))\n          });\n\n        case 12:\n          _yield$race = _context.sent;\n          response = _yield$race.response;\n          r_timeout = _yield$race.r_timeout;\n          r_cancel = _yield$race.r_cancel;\n\n          if (!r_cancel) {\n            _context.next = 21;\n            break;\n          }\n\n          controller.abort();\n          _context.next = 20;\n          return put({\n            type: \"\".concat(action, \"/cancelled\"),\n            requestPayload: payload\n          });\n\n        case 20:\n          return _context.abrupt(\"return\");\n\n        case 21:\n          if (!r_timeout) {\n            _context.next = 27;\n            break;\n          }\n\n          notification.warning({\n            message: 'Slow connection',\n            description: 'Request timed out. Please retry.'\n          });\n          controller.abort();\n          _context.next = 26;\n          return put({\n            type: \"\".concat(action, \"/error\"),\n            requestPayload: payload\n          });\n\n        case 26:\n          return _context.abrupt(\"return\");\n\n        case 27:\n          _context.next = 29;\n          return call([response, response.json]);\n\n        case 29:\n          data = _context.sent;\n\n          if (!response.ok) {\n            _context.next = 34;\n            break;\n          }\n\n          _context.next = 33;\n          return put({\n            type: \"\".concat(action, \"/success\"),\n            payload: data,\n            requestPayload: payload\n          });\n\n        case 33:\n          return _context.abrupt(\"return\");\n\n        case 34:\n          _context.next = 36;\n          return put({\n            type: \"\".concat(action, \"/error\"),\n            payload: data,\n            requestPayload: payload\n          });\n\n        case 36:\n          _context.t0 = response.status;\n          _context.next = _context.t0 === 429 ? 39 : 41;\n          break;\n\n        case 39:\n          showErrorNotification('Too many attempts.');\n          return _context.abrupt(\"break\", 43);\n\n        case 41:\n          showErrorNotification(data);\n          return _context.abrupt(\"break\", 43);\n\n        case 43:\n          _context.next = 50;\n          break;\n\n        case 45:\n          _context.prev = 45;\n          _context.t1 = _context[\"catch\"](5);\n\n          if (_context.t1.message === 'Failed to fetch') {\n            showErrorNotification('Check your internet connection.', 'Offline');\n          } else {\n            showErrorNotification();\n          }\n\n          _context.next = 50;\n          return put({\n            type: \"\".concat(action, \"/error\"),\n            payload: _context.t1,\n            requestPayload: payload\n          });\n\n        case 50:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[5, 45]]);\n}\n\nexport default function network_rootSaga() {\n  return _regeneratorRuntime.wrap(function network_rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(actions.REQUEST, REQUEST);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/stefanm/Projects/js-core/src/redux/network/sagas.js"],"names":["REQUEST","network_rootSaga","all","takeEvery","put","call","race","delay","notification","api","actions","isObject","showErrorNotification","content","title","description","errors","message","keys","Object","length","firstError","error","payload","timeout","options","action","networkSagaConfig","api_delay","type","requestPayload","controller","AbortController","signal","response","r_timeout","r_cancel","take","abort","warning","json","data","ok","status"],"mappings":";;;;oDA+BUA,O;qDAsGeC,gB;;AArIzB,SAASC,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,KAA1C,QAAuD,oBAAvD;AACA,SAASC,YAAT,QAA6B,MAA7B;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAEA,SAASC,qBAAT,CAA+BC,OAA/B,EAAwD;AAAA,MAAhBC,KAAgB,uEAAR,MAAQ;AACtD,MAAIC,WAAW,GAAG,qCAAlB;;AAEA,MAAIJ,QAAQ,CAACE,OAAD,CAAZ,EAAuB;AAAA,QACbG,MADa,GACOH,OADP,CACbG,MADa;AAAA,QACLC,OADK,GACOJ,OADP,CACLI,OADK;AAErB,QAAMC,IAAI,GAAGF,MAAM,IAAIG,MAAM,CAACD,IAAP,CAAYF,MAAZ,CAAvB;;AAEA,QAAIE,IAAI,IAAIA,IAAI,CAACE,MAAL,GAAc,CAA1B,EAA6B;AAAA,yCAGvBJ,MAHuB,CAExBE,IAAI,CAAC,CAAD,CAFoB;AAAA,UAEbG,UAFa;;AAI3BN,MAAAA,WAAW,GAAGM,UAAd,CAJ2B,CAIF;AAC1B,KALD,MAKO,IAAIJ,OAAJ,EAAa;AAClBF,MAAAA,WAAW,GAAGE,OAAd;AACD;AACF,GAZD,MAYO,IAAIJ,OAAJ,EAAa;AAClBE,IAAAA,WAAW,GAAGF,OAAd;AACD;;AAEDL,EAAAA,YAAY,CAACc,KAAb,CAAmB;AACjBL,IAAAA,OAAO,EAAEH,KADQ;AAEjBC,IAAAA,WAAW,EAAXA;AAFiB,GAAnB;AAID;;AAED,SAAUf,OAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAoBuB,UAAAA,OAApB,QAAoBA,OAApB;AACQC,UAAAA,OADR,GACkB,EADlB;AAGUC,UAAAA,OAHV,GAGiDF,OAHjD,CAGUE,OAHV,EAGmBC,MAHnB,GAGiDH,OAHjD,CAGmBG,MAHnB,EAG2BC,iBAH3B,GAGiDJ,OAHjD,CAG2BI,iBAH3B,EAKE;;AACIC,UAAAA,SANN,GAMkBJ,OANlB;;AAQE,cAAIG,iBAAiB,CAACH,OAAtB,EAA+B;AAC7BI,YAAAA,SAAS,GAAGD,iBAAiB,CAACH,OAA9B;AACD;;AAVH;AAAA;AAaI,iBAAMpB,GAAG,CAAC;AACRyB,YAAAA,IAAI,YAAKH,MAAL,aADI;AAERI,YAAAA,cAAc,EAAEP;AAFR,WAAD,CAAT;;AAbJ;AAkBI;AACMQ,UAAAA,UAnBV,GAmBuB,IAAIC,eAAJ,EAnBvB;AAoBYC,UAAAA,MApBZ,GAoBuBF,UApBvB,CAoBYE,MApBZ;AAAA;AAsB8C,iBAAM3B,IAAI,CAAC;AACnD4B,YAAAA,QAAQ,EAAE7B,IAAI,CAACI,GAAD,oBAAWgB,OAAX;AAAoBQ,cAAAA,MAAM,EAANA;AAApB,eADqC;AAEnDE,YAAAA,SAAS,EAAE5B,KAAK,CAACqB,SAAS,GAAG,IAAb,CAFmC;AAGnDQ,YAAAA,QAAQ,EAAEC,IAAI,WAAIX,MAAJ;AAHqC,WAAD,CAAV;;AAtB9C;AAAA;AAsBYQ,UAAAA,QAtBZ,eAsBYA,QAtBZ;AAsBsBC,UAAAA,SAtBtB,eAsBsBA,SAtBtB;AAsBiCC,UAAAA,QAtBjC,eAsBiCA,QAtBjC;;AAAA,eA6BQA,QA7BR;AAAA;AAAA;AAAA;;AA8BML,UAAAA,UAAU,CAACO,KAAX;AA9BN;AAgCM,iBAAMlC,GAAG,CAAC;AACRyB,YAAAA,IAAI,YAAKH,MAAL,eADI;AAERI,YAAAA,cAAc,EAAEP;AAFR,WAAD,CAAT;;AAhCN;AAAA;;AAAA;AAAA,eAyCQY,SAzCR;AAAA;AAAA;AAAA;;AA0CM3B,UAAAA,YAAY,CAAC+B,OAAb,CAAqB;AACnBtB,YAAAA,OAAO,EAAE,iBADU;AAEnBF,YAAAA,WAAW,EAAE;AAFM,WAArB;AAKAgB,UAAAA,UAAU,CAACO,KAAX;AA/CN;AAiDM,iBAAMlC,GAAG,CAAC;AACRyB,YAAAA,IAAI,YAAKH,MAAL,WADI;AAERI,YAAAA,cAAc,EAAEP;AAFR,WAAD,CAAT;;AAjDN;AAAA;;AAAA;AAAA;AA0DiB,iBAAMlB,IAAI,CAAC,CAAC6B,QAAD,EAAWA,QAAQ,CAACM,IAApB,CAAD,CAAV;;AA1DjB;AA0DUC,UAAAA,IA1DV;;AAAA,eA4DQP,QAAQ,CAACQ,EA5DjB;AAAA;AAAA;AAAA;;AAAA;AA6DM,iBAAMtC,GAAG,CAAC;AACRyB,YAAAA,IAAI,YAAKH,MAAL,aADI;AAERH,YAAAA,OAAO,EAAEkB,IAFD;AAGRX,YAAAA,cAAc,EAAEP;AAHR,WAAD,CAAT;;AA7DN;AAAA;;AAAA;AAAA;AAuEI,iBAAMnB,GAAG,CAAC;AACRyB,YAAAA,IAAI,YAAKH,MAAL,WADI;AAERH,YAAAA,OAAO,EAAEkB,IAFD;AAGRX,YAAAA,cAAc,EAAEP;AAHR,WAAD,CAAT;;AAvEJ;AAAA,wBA8EYW,QAAQ,CAACS,MA9ErB;AAAA,0CA+EW,GA/EX;AAAA;;AAAA;AAgFQ/B,UAAAA,qBAAqB,CAAC,oBAAD,CAArB;AAhFR;;AAAA;AAoFQA,UAAAA,qBAAqB,CAAC6B,IAAD,CAArB;AApFR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAwFI,cAAI,YAAExB,OAAF,KAAc,iBAAlB,EAAqC;AACnCL,YAAAA,qBAAqB,CAAC,iCAAD,EAAoC,SAApC,CAArB;AACD,WAFD,MAEO;AACLA,YAAAA,qBAAqB;AACtB;;AA5FL;AA8FI,iBAAMR,GAAG,CAAC;AACRyB,YAAAA,IAAI,YAAKH,MAAL,WADI;AAERH,YAAAA,OAAO,aAFC;AAGRO,YAAAA,cAAc,EAAEP;AAHR,WAAD,CAAT;;AA9FJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsGA,eAAe,SAAUtB,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAME,SAAS,CAACO,OAAO,CAACV,OAAT,EAAkBA,OAAlB,CAAf;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, takeEvery, put, call, race, delay } from \"redux-saga/effects\";\nimport { notification } from \"antd\";\nimport { api } from \"../../utils/net\";\nimport { actions } from \"./actions\";\nimport isObject from 'lodash/isObject';\n\nfunction showErrorNotification(content, title = 'Oops') {\n  let description = 'Something went wrong, please retry.'\n\n  if (isObject(content)) {\n    const { errors, message } = content\n    const keys = errors && Object.keys(errors)\n\n    if (keys && keys.length > 0) {\n      const {\n        [keys[0]]: [firstError],\n      } = errors\n      description = firstError // show first error in the errors array\n    } else if (message) {\n      description = message\n    }\n  } else if (content) {\n    description = content\n  }\n\n  notification.error({\n    message: title,\n    description,\n  })\n}\n\nfunction* REQUEST({ payload }) {\n  const timeout = 60\n\n  const { options, action, networkSagaConfig } = payload;\n\n  // Set API timeout\n  let api_delay = timeout;\n\n  if (networkSagaConfig.timeout) {\n    api_delay = networkSagaConfig.timeout;\n  }\n\n  try {\n    yield put({\n      type: `${action}/request`,\n      requestPayload: payload,\n    })\n\n    // Start race\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    const { response, r_timeout, r_cancel } = yield race({\n      response: call(api, { ...options, signal }),\n      r_timeout: delay(api_delay * 1000),\n      r_cancel: take(`${action}/cancel`),\n    })\n\n    // Handle cancel\n    if (r_cancel) {\n      controller.abort();\n\n      yield put({\n        type: `${action}/cancelled`,\n        requestPayload: payload,\n      });\n\n      return;\n    }\n\n    // Handle timeout\n    if (r_timeout) {\n      notification.warning({\n        message: 'Slow connection',\n        description: 'Request timed out. Please retry.',\n      })\n\n      controller.abort();\n\n      yield put({\n        type: `${action}/error`,\n        requestPayload: payload,\n      });\n\n      return;\n    }\n\n    // Get JSON data\n    const data = yield call([response, response.json])\n\n    if (response.ok) {\n      yield put({\n        type: `${action}/success`,\n        payload: data,\n        requestPayload: payload,\n      });\n\n      return;\n    }\n\n    // Oops, something happened\n    yield put({\n      type: `${action}/error`,\n      payload: data,\n      requestPayload: payload,\n    });\n\n    // Check response status code\n    switch (response.status) {\n      case 429:\n        showErrorNotification('Too many attempts.');\n        break;\n\n      default:\n        showErrorNotification(data);\n        break;\n    }\n  } catch (e) {\n    if (e.message === 'Failed to fetch') {\n      showErrorNotification('Check your internet connection.', 'Offline');\n    } else {\n      showErrorNotification();\n    }\n\n    yield put({\n      type: `${action}/error`,\n      payload: e,\n      requestPayload: payload,\n    })\n  }\n}\n\nexport default function* network_rootSaga() {\n  yield takeEvery(actions.REQUEST, REQUEST);\n}\n"]},"metadata":{},"sourceType":"module"}