{"ast":null,"code":"import _regeneratorRuntime from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(LOGOUT),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, put, select } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport store from 'store';\nimport { login as apiLogin } from '../../services/api';\nimport request from '../network/actions';\nimport { checkAccess } from '../../utils/auth';\nimport actions from './actions';\n\nvar getUser = function getUser(state) {\n  return state.user;\n};\n\nfunction login(url, extraParams) {\n  return /*#__PURE__*/_regeneratorRuntime.mark(function LOGIN(_ref) {\n    var payload;\n    return _regeneratorRuntime.wrap(function LOGIN$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            payload = _ref.payload;\n            _context.next = 3;\n            return put(request(apiLogin(url, _objectSpread({}, payload, extraParams)), 'auth'));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, LOGIN);\n  });\n}\n\nfunction LOGOUT() {\n  return _regeneratorRuntime.wrap(function LOGOUT$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return store.remove('app.user');\n\n        case 2:\n          _context2.next = 4;\n          return put({\n            type: 'auth/reset'\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction success(adminRoles) {\n  return /*#__PURE__*/_regeneratorRuntime.mark(function SUCCESS() {\n    var user;\n    return _regeneratorRuntime.wrap(function SUCCESS$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return select(getUser);\n\n          case 2:\n            user = _context3.sent;\n\n            if (!(user && !checkAccess(adminRoles, user.roles))) {\n              _context3.next = 8;\n              break;\n            }\n\n            _context3.next = 6;\n            return LOGOUT();\n\n          case 6:\n            _context3.next = 11;\n            break;\n\n          case 8:\n            _context3.next = 10;\n            return store.set('app.user', user);\n\n          case 10:\n            notification.success({\n              message: 'Logged in',\n              description: 'You have successfully logged in!'\n            });\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, SUCCESS);\n  });\n}\n\nexport default function rootSaga(config) {\n  var url, adminRoles, _config$extraParams, extraParams;\n\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          url = config.url, adminRoles = config.adminRoles, _config$extraParams = config.extraParams, extraParams = _config$extraParams === void 0 ? {} : _config$extraParams;\n          _context4.next = 3;\n          return all([takeEvery(actions.LOGIN, login(url, extraParams)), takeEvery(actions.LOGOUT, LOGOUT), takeEvery(actions.SUCCESS, success(adminRoles))]);\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/stefanm/Projects/js-core/src/redux/user/sagas.js"],"names":["LOGOUT","rootSaga","all","takeEvery","put","select","notification","store","login","apiLogin","request","checkAccess","actions","getUser","state","user","url","extraParams","LOGIN","payload","remove","type","success","adminRoles","SUCCESS","roles","set","message","description","config"],"mappings":";;;oDAkBUA,M;qDA2BeC,Q;;AA7CzB,SAASC,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,MAA9B,QAA4C,oBAA5C;AACA,SAASC,YAAT,QAA6B,MAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAK,IAAIC,QAAlB,QAAkC,oBAAlC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,IAAV;AAAA,CAArB;;AAEA,SAASP,KAAT,CAAeQ,GAAf,EAAoBC,WAApB,EAAiC;AAC/B,+CAAO,SAAUC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBC,YAAAA,OAAlB,QAAkBA,OAAlB;AAAA;AACL,mBAAMf,GAAG,CAACM,OAAO,CAACD,QAAQ,CAACO,GAAD,oBAAWG,OAAX,EAAuBF,WAAvB,EAAT,EAAgD,MAAhD,CAAR,CAAT;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA,OAAUC,KAAV;AAAA,GAAP;AAGD;;AAED,SAAUlB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,KAAK,CAACa,MAAN,CAAa,UAAb,CAAN;;AADF;AAAA;AAEE,iBAAMhB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAE;AADE,WAAD,CAAT;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAASC,OAAT,CAAiBC,UAAjB,EAA6B;AAC3B,+CAAO,SAAUC,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ,mBAAMnB,MAAM,CAACQ,OAAD,CAAZ;;AADR;AACCE,YAAAA,IADD;;AAAA,kBAIDA,IAAI,IAAI,CAACJ,WAAW,CAACY,UAAD,EAAaR,IAAI,CAACU,KAAlB,CAJnB;AAAA;AAAA;AAAA;;AAAA;AAMH,mBAAMzB,MAAM,EAAZ;;AANG;AAAA;AAAA;;AAAA;AAAA;AASH,mBAAMO,KAAK,CAACmB,GAAN,CAAU,UAAV,EAAsBX,IAAtB,CAAN;;AATG;AAWHT,YAAAA,YAAY,CAACgB,OAAb,CAAqB;AACnBK,cAAAA,OAAO,EAAE,WADU;AAEnBC,cAAAA,WAAW,EAAE;AAFM,aAArB;;AAXG;AAAA;AAAA;AAAA;AAAA;AAAA,OAAUJ,OAAV;AAAA,GAAP;AAiBD;;AAED,eAAe,SAAUvB,QAAV,CAAmB4B,MAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLb,UAAAA,GADK,GACiCa,MADjC,CACLb,GADK,EACAO,UADA,GACiCM,MADjC,CACAN,UADA,wBACiCM,MADjC,CACYZ,WADZ,EACYA,WADZ,oCAC0B,EAD1B;AAAA;AAGb,iBAAMf,GAAG,CAAC,CACRC,SAAS,CAACS,OAAO,CAACM,KAAT,EAAgBV,KAAK,CAACQ,GAAD,EAAMC,WAAN,CAArB,CADD,EAERd,SAAS,CAACS,OAAO,CAACZ,MAAT,EAAiBA,MAAjB,CAFD,EAGRG,SAAS,CAACS,OAAO,CAACY,OAAT,EAAkBF,OAAO,CAACC,UAAD,CAAzB,CAHD,CAAD,CAAT;;AAHa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, takeEvery, put, select } from 'redux-saga/effects'\nimport { notification } from 'antd'\nimport store from 'store'\n\nimport { login as apiLogin } from '../../services/api'\nimport request from '../network/actions'\nimport { checkAccess } from '../../utils/auth'\n\nimport actions from './actions'\n\nconst getUser = state => state.user\n\nfunction login(url, extraParams) {\n  return function* LOGIN({ payload }) {\n    yield put(request(apiLogin(url, { ...payload, ...extraParams }), 'auth'))\n  }\n}\n\nfunction* LOGOUT() {\n  yield store.remove('app.user')\n  yield put({\n    type: 'auth/reset',\n  })\n}\n\nfunction success(adminRoles) {\n  return function* SUCCESS() {\n    const user = yield select(getUser)\n\n    // check if user has any other role besides \"client\"\n    if (user && !checkAccess(adminRoles, user.roles)) {\n      // and force logout if not\n      yield LOGOUT()\n    } else {\n      // persist user data\n      yield store.set('app.user', user)\n\n      notification.success({\n        message: 'Logged in',\n        description: 'You have successfully logged in!',\n      })\n    }\n  }\n}\n\nexport default function* rootSaga(config) {\n  const { url, adminRoles, extraParams = {} } = config\n\n  yield all([\n    takeEvery(actions.LOGIN, login(url, extraParams)),\n    takeEvery(actions.LOGOUT, LOGOUT),\n    takeEvery(actions.SUCCESS, success(adminRoles)),\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}