{"ast":null,"code":"import _defineProperty from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/stefanm/Projects/js-core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(isMobileView),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(CHANGE_SETTING),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(SETUP),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, take, takeEvery, put } from 'redux-saga/effects';\nimport { eventChannel } from 'redux-saga';\nimport store from 'store';\nimport actions from './actions';\n\nfunction isMobileView() {\n  var load,\n      currentState,\n      prevState,\n      _args = arguments;\n  return _regeneratorRuntime.wrap(function isMobileView$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          load = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n          currentState = window.innerWidth < 768;\n          prevState = store.get('app.settings.isMobileView');\n\n          if (!(currentState !== prevState || load)) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 6;\n          return CHANGE_SETTING({\n            payload: {\n              setting: 'isMobileView',\n              value: currentState\n            }\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction CHANGE_SETTING(_ref) {\n  var _ref$payload, setting, value;\n\n  return _regeneratorRuntime.wrap(function CHANGE_SETTING$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref$payload = _ref.payload, setting = _ref$payload.setting, value = _ref$payload.value;\n          _context2.next = 3;\n          return store.set(\"app.settings.\".concat(setting), value);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'settings/SET_STATE',\n            payload: _defineProperty({}, setting, value)\n          });\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction SETUP() {\n  var channel;\n  return _regeneratorRuntime.wrap(function SETUP$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          channel = eventChannel(function (emitter) {\n            var onResize = function onResize(e) {\n              // send the event to our saga\n              emitter(e);\n            };\n\n            window.addEventListener('resize', onResize); // return an unsubscribe method\n\n            return function () {\n              window.removeEventListener('resize', onResize);\n            };\n          }); // detect isMobileView setting on app load and window resize\n\n          _context3.next = 3;\n          return isMobileView(true);\n\n        case 3:\n          if (!true) {\n            _context3.next = 10;\n            break;\n          }\n\n          _context3.next = 6;\n          return take(channel);\n\n        case 6:\n          _context3.next = 8;\n          return isMobileView();\n\n        case 8:\n          _context3.next = 3;\n          break;\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([takeEvery(actions.CHANGE_SETTING, CHANGE_SETTING), SETUP() // run once on app load to init listeners\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/stefanm/Projects/js-core/src/redux/settings/sagas.js"],"names":["isMobileView","CHANGE_SETTING","SETUP","rootSaga","all","take","takeEvery","put","eventChannel","store","actions","load","currentState","window","innerWidth","prevState","get","payload","setting","value","set","type","channel","emitter","onResize","e","addEventListener","removeEventListener"],"mappings":";;;oDAKUA,Y;qDAaAC,c;qDAUAC,K;qDAyBeC,Q;;AArDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,GAA/B,QAA0C,oBAA1C;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,SAAUV,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuBW,UAAAA,IAAvB,2DAA8B,KAA9B;AACQC,UAAAA,YADR,GACuBC,MAAM,CAACC,UAAP,GAAoB,GAD3C;AAEQC,UAAAA,SAFR,GAEoBN,KAAK,CAACO,GAAN,CAAU,2BAAV,CAFpB;;AAAA,gBAGMJ,YAAY,KAAKG,SAAjB,IAA8BJ,IAHpC;AAAA;AAAA;AAAA;;AAAA;AAII,iBAAMV,cAAc,CAAC;AACnBgB,YAAAA,OAAO,EAAE;AACPC,cAAAA,OAAO,EAAE,cADF;AAEPC,cAAAA,KAAK,EAAEP;AAFA;AADU,WAAD,CAApB;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUX,cAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8BAA2BgB,OAA3B,EAAsCC,OAAtC,gBAAsCA,OAAtC,EAA+CC,KAA/C,gBAA+CA,KAA/C;AAAA;AACE,iBAAMV,KAAK,CAACW,GAAN,wBAA0BF,OAA1B,GAAqCC,KAArC,CAAN;;AADF;AAAA;AAEE,iBAAMZ,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAE,oBADE;AAERJ,YAAAA,OAAO,sBACJC,OADI,EACMC,KADN;AAFC,WAAD,CAAT;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAUjB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACQoB,UAAAA,OADR,GACkBd,YAAY,CAAC,UAAAe,OAAO,EAAI;AACtC,gBAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,CAAC,EAAI;AACpB;AACAF,cAAAA,OAAO,CAACE,CAAD,CAAP;AACD,aAHD;;AAKAZ,YAAAA,MAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkCF,QAAlC,EANsC,CAQtC;;AACA,mBAAO,YAAM;AACXX,cAAAA,MAAM,CAACc,mBAAP,CAA2B,QAA3B,EAAqCH,QAArC;AACD,aAFD;AAGD,WAZ2B,CAD9B,EAeE;;AAfF;AAgBE,iBAAMxB,YAAY,CAAC,IAAD,CAAlB;;AAhBF;AAAA,eAmBS,IAnBT;AAAA;AAAA;AAAA;;AAAA;AAoBI,iBAAMK,IAAI,CAACiB,OAAD,CAAV;;AApBJ;AAAA;AAqBI,iBAAMtB,YAAY,EAAlB;;AArBJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRE,SAAS,CAACI,OAAO,CAACT,cAAT,EAAyBA,cAAzB,CADD,EAERC,KAAK,EAFG,CAEC;AAFD,WAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, take, takeEvery, put } from 'redux-saga/effects'\nimport { eventChannel } from 'redux-saga'\nimport store from 'store'\nimport actions from './actions'\n\nfunction* isMobileView(load = false) {\n  const currentState = window.innerWidth < 768\n  const prevState = store.get('app.settings.isMobileView')\n  if (currentState !== prevState || load) {\n    yield CHANGE_SETTING({\n      payload: {\n        setting: 'isMobileView',\n        value: currentState,\n      },\n    })\n  }\n}\n\nfunction* CHANGE_SETTING({ payload: { setting, value } }) {\n  yield store.set(`app.settings.${setting}`, value)\n  yield put({\n    type: 'settings/SET_STATE',\n    payload: {\n      [setting]: value,\n    },\n  })\n}\n\nfunction* SETUP() {\n  const channel = eventChannel(emitter => {\n    const onResize = e => {\n      // send the event to our saga\n      emitter(e)\n    }\n\n    window.addEventListener('resize', onResize)\n\n    // return an unsubscribe method\n    return () => {\n      window.removeEventListener('resize', onResize)\n    }\n  })\n\n  // detect isMobileView setting on app load and window resize\n  yield isMobileView(true)\n\n  // process events until operation completes\n  while (true) {\n    yield take(channel)\n    yield isMobileView()\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(actions.CHANGE_SETTING, CHANGE_SETTING),\n    SETUP(), // run once on app load to init listeners\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}